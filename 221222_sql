--PL/SQL (Procedural Language edtension to SQL : sql을 확장한 절차적 언어)
--:관계형 데이터베이스에서 사용되는 오라클 엑세스 언어
--:PL/SQL블록을 보내면 서버쪽에서 블록을 받아 PROCEDURAL을 나눈다.
--:프로그램 종류 : procedure, function, trigger


--저장 프로시저(Stored Prodecure)
--:프로그래머가 생성해 놓은 쿼리문을 
--마치 하나의 메소드 형식으로 관리하는 것
--=>서버에 저장해놓고 주기적으로 반복해서 사용

--OR REPLACE: 이미 같은 이름의 프로시저가 
--	    존재하는 경우 기존의 프로시저 내용을
--	    지우고 새로운 내용으로 바꿔준다.



--
SET SERVEROUTPUT ON;
BEGIN 
DBMS_OUTPUT.PUT_LINE('Hello PL/SQL!');
END;
/

--
SET SERVEROUTPUT ON;
--V_CON이라는 변수를 하나 만들어 1을 대입함
DECLARE
    V_CON NUMBER:=1;    
BEGIN
    IF V_CON>1 THEN
        DBMS_OUTPUT.PUT_LINE('1초과');
    ELSIF V_CON <1 THEN
        DBMS_OUTPUT.PUT_LINE('1보다작다');
    ELSIF V_CON =1 THEN
        DBMS_OUTPUT.PUT_LINE('같다');
    
    END IF;
    END;
/

--
DECLARE
    V_SCORE NUMBER:=87;
    
BEGIN
    CASE
        WHEN V_SCORE>=90 THEN DBMS_OUTPUT.PUT_LINE('A');
        WHEN V_SCORE<90 THEN DBMS_OUTPUT.PUT_LINE('B');
    END CASE;
END;
/

--기본 LOOP
DECLARE
    V_CNT NUMBER:=0;
    V_SUM NUMBER:=0;

BEGIN
    LOOP
        V_CNT:=V_CNT+1;
        V_SUM:=V_SUM+V_CNT;
        DBMS_OUTPUT.PUT_LINE(V_SUM);
        EXIT WHEN V_CNT=10;
    END LOOP;
END;
/

--
DECLARE 
    V_CNT NUMBER:=0;
    V_SUM NUMBER:=0;
   BEGIN
    WHILE V_CNT <10 LOOP
    V_CNT:=V_CNT+1;
    V_SUM:=V_SUM+V_CNT;
     DBMS_OUTPUT.PUT_LINE('V_SUM :'||V_SUM);
    END LOOP;
   END;
/

--
DECLARE
    V_SUM NUMBER:=0;
    BEGIN
    FOR I IN 0..10 LOOP
    V_SUM:=V_SUM+I;
    DBMS_OUTPUT.PUT_LINE('V_SUM :'||V_SUM);
    END LOOP;
END;
/

--
SET SERVEROUTPUT ON;
BEGIN
FOR I IN 0..10 LOOP
CONTINUE WHEN MOD(I,2)=0;
DBMS_OUTPUT.PUT_LINE('현재 I의 값 : '||I);
END LOOP;
END;
/

--
DESC STUDENT;


CREATE OR REPLACE PROCEDURE TEST2
(V_STU_NO IN STUDENT.STU_NO%TYPE,
V_STU_GRADE IN STUDENT.STU_GRADE%TYPE)

IS
BEGIN
    UPDATE STUDENT
    SET STU_GRADE=V_STU_GRADE
    WHERE STU_NO=V_STU_NO;
    
END TEST2;
/

EXECUTE TEST2(20153075,3);

SELECT * FROM STUDENT;

--
CREATE OR REPLACE PROCEDURE TEST3
(V_STU_NO IN STUDENT.STU_NO%TYPE,
V_STU_NAME OUT STUDENT.STU_NAME%TYPE)
IS
BEGIN
    SELECT STU_NAME
    INTO V_STU_NAME --STU_NAME을 V_STU_NAME넣겠다.
    FROM STUDENT
    WHERE STU_NO=V_STU_NO;
    END TEST3;
/   
--이름을 전달받아야함(변수 정의)
VARIABLE D_STU_NAME VARCHAR2(10);
EXECUTE TEST3(20153075,:D_STU_NAME);
    
PRINT D_STU_NAME;

--
CREATE PROCEDURE TEST4
(V_SUB_NO IN ENROL.SUB_NO%TYPE,
V_STU_NO IN ENROL.STU_NO%TYPE,
V_ENR_GRADE IN OUT ENROL.ENR_GRADE%TYPE)

IS 
BEGIN
    UPDATE ENROL
    SET ENR_GRADE=ENR_GRADE+V_ENR_GRADE
    WHERE STU_NO=V_STU_NO AND SUB_NO=V_SUB_NO;
    END TEST4;
/

VARIABLE D_ENR_GRADE NUMBER
BEGIN
    :D_ENR_GRADE:=10;
    END;
    /
    
EXECUTE TEST4(101,20131001,:D_ENR_GRADE);
PRINT D_ENR_GRADE;

SELECT * FROM ENROL;


SELECT * FROM EMP;
--
--신입사원을 채용하였다.
--사원번호, 사원이름, 사원직무, 상급자사원번호, 급여, 부서번호를 입력받아
--사원 테이블에 삽입하는 프로시저를 작성해라.
CREATE OR REPLACE PROCEDURE TEST5
(V_EMPNO IN emp.empno%TYPE,
V_ENAME IN emp.ename%TYPE,
V_JOB IN emp.job%TYPE,
V_MGR IN emp.mgr%TYPE,
V_SAL IN emp.sal%TYPE,
V_DEPTNO IN emp.deptno%TYPE)
IS
BEGIN
INSERT INTO EMP(EMPNO,ENAME,JOB,MGR,SAL,DEPTNO)
VALUES(V_EMPNO,V_ENAME,V_JOB ,V_MGR,V_SAL, V_DEPTNO);

COMMIT;
END TEST5;
/

EXECUTE NEWEMPLOYEE(7888,'히히히','대리',7832,7000,20);

SELECT *FROM EMP;


--부서번호를 변경하는 프로시저를 작성해라.
--(emp 테이블에서) - update~set~where
--(입력된 사원번호가 같을때 부서번호 
--변경해라)

CREATE OR REPLACE PROCEDURE TEST6(
V_EMPNO IN EMP.EMPNO%TYPE,
V_DEPTNO IN EMP.DEPTNO%TYPE)
IS
BEGIN
UPDATE EMP
SET DEPTNO=V_DEPTNO
WHERE EMPNO=V_EMPNO;

COMMIT;
END TEST6;
/

EXECUTE TEST6(7888,10);
SELECT*FROM EMP;

--
CREATE SEQUENCE SEQ1
INCREMENT BY 1
START WITH 201
MAXVALUE 999;

SELECT * FROM USER_SEQUENCES;

SELECT SEQ1.NEXTVAL FROM DUAL;

create or replace procedure test5(
V_SUB_NAME IN SUBJECT.SUB_NAME%TYPE,
V_SUB_PROF IN SUBJECT.SUB_PROF%TYPE,
V_SUB_GRADE IN SUBJECT.SUB_GRADE%TYPE,
V_SUB_DEPT IN SUBJECT.SUB_DEPT%TYPE)
IS
BEGIN
    INSERT INTO SUBJECT VALUES(SEQ1.NEXTVAL,V_SUB_NAME,V_SUB_PROF,V_SUB_GRADE,V_SUB_DEPT);
    COMMIT;
    END TEST5;
/
EXECUTE TEST5('PL/SQL','홍길동',3,'컴퓨터정보');
SELECT * FROM SUBJECT;

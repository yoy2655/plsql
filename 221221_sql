rename t_student to st;
select * from st;
rename st to t_student;
select * from t_student;

truncate table t_student;   --데이터만 삭제되고 테이블 구조는 남아있다
select * from t_student;

drop table t_student;

select * from student;

--p324 1번
create table EMP_HW(
empno number(4),
ename varchar2(10),
job varchar2(9),
mgr number(4),
hiredate date,
sal number(7,2),
comm number(7,2),
deptno number(2));

--p324 2번
alter table EMP_HW add BIGO varchar2(20);

--p324 3번
alter table EMP_HW modify BIGO varchar2(30);

--p324 4번
alter table EMP_HW rename column BIGO to REMARK;

--p325 5번
insert into emp_hw select empno, ename, job, mgr, hiredate, sal, comm, deptno, null
from emp;

select * from emp_hw;

--p325 6번
drop table emp_hw;


-- 학생테이블로부터 학년이 1 또는 2학년인 조건들만 복사하여 student1 테이블을 생성한다.
create table student1 as
select * 
from student 
where stu_grade in(1,2);
-- 과목테이블을 복사하여 subject1 테이블을 생성한다.
create table subject1 as
select *
from subject;
-- 수강테이블을 복사하여 enrol1 테이블을 생성한다.
create table enrol1 as
select *
from enrol;
-- 다 한 후 복사된 테이블의 내용을 확인한다.
select * from student1;
select * from subject1;
select * from enrol1;
--학번 20101059, 이름 조병준, 학과 컴퓨터정보, 학년 1, 반B, 키 164, 몸무게 70인남학생이 추가되었다.
insert into student1 values(20101059, '조병준', '컴퓨터정보', 1, 'B', 'M', 164, 70);
--학번 20102038, 이름 남지선, 학과 전기전자, 학년 1, 반C, 여학생이 추가되었다.
insert into student1 values(20102038, '남지선', '전기전자', 1, 'C', 'F', null, null);
--Student1 테이블에 학생 테이블의 3학년 학생들 데이터를 입력하라.
insert into student1 select * from student where stu_grade in 3;

--20153088학생이 자퇴하였다.
delete from student1 where stu_no=20153088;
select * from student1;

--과목번호 112, 과목이름 자동화시스템, 교수명 고종민, 학년 3, 학과 기계가 추가되었다.
insert into subject1 values(112, '자동화시스템', '고종민', 3, '기계');
select * from subject1;

--과목번호가 110에서 501로 변경되었다.
update subject1 set sub_no=501 where sub_no=110;

--과목번호 101이 폐강되었다.
delete from subject1 where sub_no=101;

--enrol1테이블에서 subject1에 없는 과목번호를 999로 변경해라.
update enrol1 
set sub_no=999 
where sub_no not in (select sub_no from subject1);

--enrol1테이블에서 student1에 없는 학번을 99999999로 변경해라.
update enrol1
set stu_no=99999999
where stu_no not in (select stu_no from student1);

--enrol1테이블에서 과목번호 999를 삭제하라.
delete from enrol1 where sub_no=999;

select * from enrol1;

--enrol1테이블에서 학번 99999999를 삭제하라.
delete from enrol1 where stu_no=99999999;

--1.	20 또는 30인 부서번호만 사원(emp)테이블에서 복사하여 emp1테이블을 생성해라.
create table emp1 as
select * from emp where deptno in (20,30);
--2.	dept 테이블을 복사하여 dept1테이블을 생성해라.
create table dept1 as
select * from dept;
--3.	salgrade테이블을 복사하여 salgrade1테이블을 생성해라.
create table salgrade1 as
select * from salgrade;
--4.	각각의 테이블을 확인한다.
select * from emp1;
select * from dept1;
select * from salgrade1;
--5.	사원번호 7401, 사원이름 HOMER, 급여 1300, 부서번호 10인 사원이 오늘 입사하였다.
insert into emp1 values(7401, 'HOMER', null, null, '22-12-21', 1300, null, 10);
--6.	사원번호 7323, 사원이름 BRANDA, 부서번호 30, 사원번호 7499와 동일한 급여를 받는 사원이 입사하였다. (부질의)
insert into emp1(empno, ename, deptno, sal) 
values (7323,'BRANDA', 30, 
(select sal 
from emp1 
where empno=7499));
--7.	사원(emp)테이블에서 부서번호가 10인 데이터를 emp1테이블에 삽입해라.
insert into emp1 select * from emp where deptno=10;
--8.	사원번호 7369의 사원직무를 ANALYST로 바꾸어라.
update emp1 set job='ANALYST'
where empno=7369;
---9.	부서번호 20인 직원들의 급여를 10% 감하라.
update emp1 set sal=sal-(sal*0.1)
where deptno=20;
--10.	모든 사원의 급여를 +100 증가시켜라
update emp1 set sal=sal+100;
--11.	지역이 DALLAS인 사원들의 급여를 10감하라. (부질의)
update emp1 set sal=sal-10
where deptno =(select deptno from dept1 where loc='DALLAS');
--12.	사원번호 7499가 퇴사하였다.
delete from emp1 
where empno=7499;
--13.	부서번호 50, 부서이름 ‘PLANNING’, 지역 ‘MIAMI’가 추가되었다.
insert into dept1 values(50, 'PLANNING', 'MIAMI');
--14.	부서번호가 40인 부서가 60으로 변경되었다.
update dept1 set deptno=60 where deptno=40;
--15.	Dept1 테이블에 없는 부서번호들을 갖고 있는 사원들의 부서번호를 99로 변경하라. (부질의)
update emp1 set emp1.deptno=99 where emp1.deptno not in (select dept1.deptno from dept1);
--16.	JONES, JOSH, CLARK가 30번 부서로 바뀌었다.
update emp1 set deptno=30 where ename in ('JONES', 'JOSH', 'CLARK');
--17.	커미션이 null인 데이터를 0으로 바꾸어라.
update emp1 set comm=0 where comm is null;
update emp1 set comm=nvl(comm, 0) where comm is null;
--18.	Emp1 전체 테이블의 데이터를 삭제하라.
truncate table emp1;

select * from emp;

drop table book;
create table book(
bookid number(4),
bookname varchar2(30),
publisher varchar2(25),
price number(20),
constraint p_bookid primary key(bookid));

drop table customer;
create table customer(
custid number(4),
name varchar2(10),
address varchar2(20),
phone varchar2(30),
constraint p_custid primary key(custid));

drop table orders;
create table orders(
orderid number(4),
custid number(4),
bookid number(4),
saleprice number(20),
orderdate date,
constraint p_orderid primary key(orderid));

insert into book values(1,'컴퓨터의 역사','아이티',7000);
insert into book values(2,'컴퓨터는 무엇일까','굿북',13000);
insert into book values(3,'컴퓨터의 이해','솔데스크',22000);
insert into book values(4,'자바 이론','솔데스크',35000);
insert into book values(5,'데이터베이스 교본','아이티',8000);
insert into book values(6,'HTML 기술','아이티',6000);
insert into book values(7,'스프링의 개념','에비씨미디어',20000);
insert into book values(8,'스프링을 부탁해','에비씨빛미디어',13000);
insert into book values(9,'파이썬 이야기','코딩빔',7500);
insert into book values(10,'python story','Pearson',13000);


insert into customer values(1,'박건우','인천시 송도','010-1111-2222');
insert into customer values(2,'김선해','서울시 종로구','010-2111-2222');	
insert into customer values(3,'장지혜','서울시 용산구','010-3111-2222');
insert into customer values(4,'추오섭','경기도 의정부','010-4111-2222');	
insert into customer values(5,'박승철','서울시 마포구', NULL);

insert into orders values(1,1,1,6000,'2022-05-01');
insert into orders values(2,1,3,21000,'2022-05-03');
insert into orders values(3,2,5,8000,'2022-05-03');
insert into orders values(4,3,6,6000,'2022-05-04');
insert into orders values(5,4,7,20000,'2022-05-05');
insert into orders values(6,1,2,12000,'2022-05-07');
insert into orders values(7,4,8,13000,'2022-05-07');
insert into orders values(8,3,10,12000,'2022-05-08');
insert into orders values(9,2,10,7000,'2022-05-09');
insert into orders values(10,3,8,13000,'2022-05-10');


select * from book;
select * from customer;
select * from orders;
--1.	김선해 고객의 전화번호를 찾아라.
select name,phone from customer where name='김선해';
--2.	모든 도서의 이름과 가격을 검색해라.
select bookname,price from book;
--3.	모든 도서의 도서번호, 도서이름, 출판사, 가격을 검색해라.
select bookid,bookname,publisher,price from book;
--4.	도서 테이블에 있는 모든 출판사를 검색해라. (중복제거해서)
select distinct publisher from book;
--5.	가격이 20000원 미만인 도서를 검색해라.
select * from book where price<20000;
--6.	가격이 10000원 이상 20000 이하인 도서를 검색해라.
select * from book where price between 10000 and 20000;
--7.	출판사가 ‘아이티’ 혹은 ‘솔데스크’ 인 도서를 검색해라.
select * from book where publisher in ('아이티', '솔데스크');
--8.	출판사가 ‘아이티’ 혹은 ‘솔데스크’ 아닌 도서를 검색해라.
select * from book where publisher not in('아이티', '솔데스크');
--9.	‘컴퓨터의 역사’를 출간한 출판사를 검색해라.
select bookname,publisher from book where bookname='컴퓨터의 역사';
--10.	도서이름에 ‘컴퓨터’가 포함된 출판사를 검색해라.
select bookname,publisher from book where bookname like '%컴퓨터%';
--11.	도서이름의 왼쪽 두번 째에 ‘퓨’라는 문자열을 갖는 도서를 검색해라.
select * from book where bookname like '_퓨%';
--12.	컴퓨터에 관한 도서 중 가격이 20000원 이상인 도서를 검색해라.
select * from book where bookname like '%컴퓨터%' and price>=20000;
--13.	도서를 이름순으로 검색해라.
select * from book order by bookname;
--14.	도서를 가격순으로 검색하고, 가격이 같으면 이름순으로 검색해라.
select * from book order by price, bookname;
--15.	도서를 가격의 내림차순으로 검색해라. 가격이 같다면 출판사의 오름차순으로 검색해라.
select * from book order by price desc, publisher;
--16.	고객이 주문한 도서의 총 판매액을 구해라.
select sum(price) as 총판매액 
from book, orders
where book.bookid=orders.bookid;
--17.	2번 김선해 고객이 주문한 도서의 총 판매액을 구해라.
select sum(saleprice) as 김선해
from customer, orders
where customer.custid=orders.custid and customer.name='김선해';
--18.	고객이 주문한 도서의 총 판매액, 평균값, 최저가, 최고가를 구해라.
select sum(price) as 총판매액, avg(price) as 평균값, min(price) as 최저가, max(price) as 최고가
from book, orders
where book.bookid=orders.bookid;
--19.	503서점의 도서 판매 건수를 구해라.
select count(*) as 도서판매건수 from orders;
--20.	고객별로 주문한 도서의 총 수량과 총 판매액을 구해라.
select custid,count(*) as 총주문수량, sum(saleprice) as 총주문금액
from orders
group by custid;
--21.	가격이 8000원 이상인 도서를 구매한 고객에 대하여 고객별 주문 도서의 총 수량을 구해라. 단, 두 권 이상 구매한 고객만 구해라.
select custid,count(*) as by_count
from orders
where saleprice>=8000
group by custid
having count(*)>=2;
--22.	고객과 고객의 주문에 관한 데이터를 모두 보여라.
select *
from customer, orders
where customer.custid=orders.custid;
--23.	고객과 고객의 주문에 관한 데이터를 고객번호 순으로 정렬하여 보여라.
select *
from customer, orders
where customer.custid=orders.custid
order by customer.custid;
--24.	고객의 이름과 고객이 주문한 도서의 판매가격을 검색해라.
select name, price 
from book, orders, customer
where book.bookid=orders.bookid and customer.custid=orders.custid;
--25.	고객별로 주문한 모든 도서의 총 판매액을 구하고, 고객별로 정렬해라.
select customer.custid,sum(customer.custid) 
from book, orders, customer
where book.bookid=orders.bookid and customer.custid=orders.custid
group by customer.custid
order by customer.custid;
--26.	고객의 이름과 고객이 주문한 도서의 이름을 구해라.
--(1)
select cust.name, bk.bookname, ord.bookid
from orders ord, customer cust, book bk
where ord.custid=cust.custid
and ord.bookid=bk.bookid;
--(2)
select cust.name, bk.bookname, ord.bookid
from orders ord
join customer cust on ord.custid=cust.custid
join book bk on ord.bookid=bk.bookid;
--(3)
select name, bookname
from book natural join customer natural join orders
order by name;
--27.	가격이 20000원인 도서를 주문한 고객의 이름과 도서의 이름을 구해라.
select c.name as 고객이름, b.bookname as 도서이름
from book b, customer c, orders o
where b.bookid=o.bookid and c.custid=o.custid and b.price=20000;
--28.	도서를 구매하지 않은 고객을 포함하여 고객의 이름과 고객이 주문한 도서의 판매가격을 구해라.
select c.name,o.saleprice
from customer c left outer join orders o
on (c.custid=o.custid)
order by c.name;
--29.	가장 비싼 도서의 이름을 구해라.
select a.bookname
from book a
where a.price =(select max(b.price)
from book b);
--30.	도서를 구매한 적이 있는 고객의 이름을 검색해라.
select distinct name
from customer, orders
where customer.custid=orders.custid;
--31.	솔데스크에서 출판한 도서를 구매한 고객의 이름을 보여라.
select name
from book b, customer c, orders o
where b.bookid=o.bookid and c.custid=o.custid 
and b.publisher='솔데스크';
--★32.	출판사별로 출판사의 평균 도서 가격보다 비싼 도서를 구해라.
--(1)
select bk.bookname
from book bk,(select publisher, avg(price) as avg_price
from book group by publisher) bk_avg
where bk.publisher=bk_avg.publisher
and bk.price>bk_avg.avg_price;
--(2)
select bk.bookname
from book bk
where bk.price>(select avg(bk2.price) from book bk2 where bk2.publisher=bk.publisher);
--33.	Book테이블에 새로운 도서 ‘공학 도서’를 삽입해라. 공학 도서는 더샘에서 출간했으며 가격을 40000원이다.
insert into book values (11,'공학 도서','더샘',40000);
--34.	Book테이블에 새로운 도서 ‘공학 도서’를 삽입해라. 공학 도서는 더샘에서 출간했으며 가격은 미정이다.
insert into book values(12,'공학 도서','더샘',null);
--35.	Customer테이블에서 고객번호가 5인 고객의 주소를 ‘서울시 서초구’로 변경해라.
update customer
set address='서울시 서초구'
where custid=5;
--36.	Customer테이블에서 박승철 고객의 주소를 김선해 고객의 주소로 변경해라.
update customer
set address=(select address
from customer
where name='박승철')
where name='김선해';
--37.	아이티에서 출판한 도서의 제목과 제목의 글자수를 확인해라.
select bookname, length(bookname)
from book
where publisher='아이티';
--★38.	503서점의 고객 중에서 같은 성(이름 성)을 가진 사람이 몇 명이나 되는지 성별 인원수를 구해라.
select sung, count(*)
from (select substr(name,1,1)as sung from customer)
group by sung;
--39.	503서점은 주문일로부터 10일 후 매출을 확정한다. 각 주문의 확정일자를 구해라.
select to_char(orderdate,'yymmdd')+10 
from orders;
--40.	503서점이 2022년 5월 7일에 주문받은 도서의 주문번호, 주문일, 고객번호, 도서번호를 모두 보여라. 주문일은 ‘yyyy-mm-dd요일’형태로 표시한다.
select orderid, to_char(orderdate,'yyyy-mm-dd day') as orderdate, custid, bookid
from orders 
where  orderdate= '2022-05-07';
--41.	이름, 전화번호가 포함된 고객목록을 보여라. 단, 전화번호가 없는 고객은 ‘연락처없음’으로 표시해라.
select name, nvl(to_char(phone), '연락처없음') from customer;
--42.	평균 주문금액 이하의 주문에 대해 주문번호와 금액을 보여라.
select orderid, saleprice
from orders
where saleprice > (select avg(saleprice)
from orders);
--★43.	각 고객의 평균 주문금액보다 큰 금액의 주문 내역에 대해 주문번호, 고객번호, 금액을 보여라.
select orderid, custid, saleprice
from orders
where saleprice > all (select avg(saleprice)
from orders
group by custid);
--44.	서울시에 거주하는 고객에게 판매한 도서의 총판매액을 구해라.
--테이블이 2개이면 조인이나 서브쿼리를 생각해주면 된다.
select sum(saleprice) as sum_seoul
from orders
where custid in (select custid from customer where address like '서울%');
--45.	Customer테이블에서 고객번호가 5인 고객을 삭제해라.
delete from customer
where custid=5;

--38번, 43번
